# -*- coding: utf-8 -*-
"""feature engineering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ukZCBmQN8Id4hgwfJzSaREObRek6166t

#Read the File
"""

import pandas as pd
import matplotlib.pyplot as plt

weather = pd.read_csv('/content/drive/MyDrive/Adamson U/Courses/THESIS/Model/csv/weather data.csv')
weather.head()

rainfed_palay = pd.read_csv('/content/drive/MyDrive/Adamson U/Courses/THESIS/Model/csv/rainfed palay.csv')
rainfed_palay.head()

"""# Filtering


"""

# Get unique values
unique_year = weather['Year'].unique().tolist()
print(unique_year)

# Get values per unique year
temp_specyear = []
humidity_specyear = []
rain_specyear = []
crop_specyear = []

for index in unique_year:
  temp_specyear.append(list(weather[weather['Year'] == index]['Temperature (C)']))
  humidity_specyear.append(list(weather[weather['Year'] == index]['Humidity (%)']))
  rain_specyear.append(list(weather[weather['Year'] == index]['rain 1h']))
  crop_specyear.append(list(rainfed_palay[rainfed_palay['year'] == index]['weight']))

print('Temperature:', temp_specyear)
print('Humidity:', humidity_specyear)
print('Rain:', rain_specyear)
print('Crop Weight:', crop_specyear)

ARIMA_final_allocation = []

def allocate_this(t):
  # Time (t)
  # t = 35

  # Dataframe
  data = pd.DataFrame({'Temperature value': temp_specyear[t], 'Humdity value': humidity_specyear[t], 'Rain value': rain_specyear[t]})


  # rainfed palat amount (year 0 - 36)
  total_amount = float(rainfed_palay['weight'][t].replace(',',''))


  # divide the weight of each value
  data['Weight Temperature'] = data['Temperature value'].apply(lambda x: (28 - abs(x - 28)) / 28)
  total_weight_temperature = data['Weight Temperature'].sum()

  data['Weight Humidity'] = data['Humdity value'].apply(lambda x: (75 - abs(x - 75)) / 75)
  total_weight_humidity = data['Weight Humidity'].sum()

  data['Weight Rain'] = data['Rain value'].apply(lambda x: (10 - abs(x - 10)) / 10)
  total_weight_rain = data['Weight Rain'].sum()


  # data allocation
  data['Temperature Allocation']  = data['Weight Temperature']  / total_weight_temperature  * total_amount
  data['Humidity Allocation']     = data['Weight Humidity']     / total_weight_humidity     * total_amount
  data['Rain Allocation']         = data['Weight Rain']         / total_weight_rain         * total_amount


  # Final Allocation
  data['FINAL Allocation']        = ((data['Temperature Allocation'] + data['Humidity Allocation'] + data['Rain Allocation'] ) / 3)
  # data                            = data.sort_values(by='FINAL Allocation') # Sort values from lowest to highest

  ARIMA_final_allocation.append(data['FINAL Allocation'])


  #print all data
  print(data)
  print('Temperature: ',sum(data['Temperature Allocation']))
  print('Humidity: ',sum(data['Humidity Allocation']))
  print('Rain: ',sum(data['Rain Allocation']))
  print('Final Allocation: ',sum(data['FINAL Allocation']))

print(len(temp_specyear))
print(len(humidity_specyear))
print(len(rain_specyear))
print(len(crop_specyear))

year = 1987
for x in range(36):
  print('year: ', year)
  year+=1
  allocate_this(x)
  print('\n')

# multidimensional array to one-dimensional (METHOD)
def flatten(arr):
    return [item for sublist in arr for item in sublist]

# multidimensional array to one-dimensional (Call Method)
ARIMA_final_allocation = flatten(ARIMA_final_allocation)

# Place in DataFrame
df_ARIMA_final_allocation = pd.DataFrame(ARIMA_final_allocation)

df_ARIMA_final_allocation.plot(figsize=(20, 6))

"""#Save data to CSV"""

# Save CSV

# Specify the file path where you want to save the CSV file
csv_file_path = '/content/drive/MyDrive/Adamson U/Courses/THESIS/Model/csv/df_ARIMA_final_allocation_new_test1.csv'

# Use the to_csv method to save the DataFrame to a CSV file
df_ARIMA_final_allocation.to_csv(csv_file_path, index=False)  # Set index=False to exclude the index column in the CSV file

print(f'DataFrame saved to {csv_file_path}')

